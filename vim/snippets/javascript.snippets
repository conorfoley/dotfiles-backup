# vim:ft=snippets

# console log
snippet cl "console rewrite" !
console.log(${1:'$2'}${VISUAL})
endsnippet
snippet cllc
console.log('%c`!p snip.rv = t[1].upper()`: ',"color:blue;font-weight:bold;", ${1:text})
endsnippet
snippet cll
console.log('`!p snip.rv = t[1].upper()`: ', ${1:text})
endsnippet
snippet wri
process.stdout.write(''+ $1);
endsnippet
snippet de
debug('`!p snip.rv = t[1]`: %${2:s}', ${1:process});$3
endsnippet

# conditionals
snippet iff "If one-liner"
if ($1) $2${3:;}
endsnippet
snippet iferr "If return err"
if (err) return ${1:console.error}(err);$0
endsnippet
snippet in
if (!(this instanceof ${1:Constructor}))
	return new $1(${2})
endsnippet

# functions
snippet req "Title transformation"
require('$1')
endsnippet
snippet fu "Simple function" i
function(${1:}) {
	${2}
}
endsnippet

# assignment
snippet varr "Require method"
var ${1:EventEmitter} = require('${2:events}').$1${3};$0
endsnippet
snippet vars "Require namespace"
var ${1:fs} = require('$1');
endsnippet
snippet 'var self' "Self assignment"
var self = this;
endsnippet
snippet mod
module.exports$0
endsnippet

# mocha
snippet des "Mocha describe"
describe('${1:something}', function() {
	$2
});
endsnippet
snippet desc "Mocha describe"
describe('${1:something}', function() {
	it('${2:should do something}', function(${3:done}) {
		$0
		${4:done();}
	});
});
endsnippet
snippet exec "Mocha describe"
exec('${1:bin}/${2:cli}${3: --help}', function(err, stdout) {
	if (err) return done(err);
	${4:stdout}.should.${5:include}('${6:Usage}');
	done();
});
endsnippet
snippet itex "Mocha it exec"
it('$2', function(done) {
	exec('bin/${1:cli} ${2:--version}', function(err, stdout) {
		if (err) return done(err);
		${4:stdout}.should.${5:include}('${6:Usage}');$0
		done();
	});
});
endsnippet
snippet descex "Mocha bin exec"
describe('${1:cli}', function() {
	it('$2', function(done) {
		exec('bin/$1 ${2:--help}', function(err, stdout) {
			if (err) return done(err);
			${4:stdout}.should.${5:include}('${6:Usage}');$0
			done();
		});
	});
});
endsnippet

# commander
snippet .option "Commander" i
.option('-${1}, --${2}', '${3}'${4:, ${5}})$0
endsnippet
snippet 'var program'
var program = require('commander');

program.version(require('../package.json').version)$1
endsnippet

# documentation
snippet /* "Comment block"
/**
 * $1
 */
endsnippet
snippet @p "Param" i
@param {$1} $2
endsnippet
snippet /m "Module dependencies"
/**
 * Module dependencies.
 */$0
endsnippet
